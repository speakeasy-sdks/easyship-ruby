# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module EasyshipApi
  module Shared
    # OAuth2TokenResponseTokenType - OAuth 2 Token Type
    class OAuth2TokenResponseTokenType < T::Enum
      enums do
        BEARER = new('Bearer')
      end
    end


    # OAuth 2 Token Response
    class OAuth2TokenResponse < EasyshipApi::Utils::FieldAugmented
      extend T::Sig

      # OAuth 2 Access Token
      field :access_token, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('access_token') } }
      # OAuth 2 Access Token Creation Time
      field :created_at, T.nilable(Integer), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('created_at') } }
      # OAuth 2 Access Token Expiration Time in Seconds
      field :expires_in, T.nilable(Integer), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('expires_in') } }
      # OAuth 2 Scopes separated by space. All Enterprise and Public API scopes are supported, but they must be allowed on the Enterprise API Client Application on the Dashboard.
      field :scope, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('scope') } }
      # OAuth 2 Token Type
      field :token_type, T.nilable(Shared::OAuth2TokenResponseTokenType), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('token_type'), 'decoder': Utils.enum_from_string(Shared::OAuth2TokenResponseTokenType, true) } }


      sig { params(access_token: T.nilable(String), created_at: T.nilable(Integer), expires_in: T.nilable(Integer), scope: T.nilable(String), token_type: T.nilable(Shared::OAuth2TokenResponseTokenType)).void }
      def initialize(access_token: nil, created_at: nil, expires_in: nil, scope: nil, token_type: nil)
        @access_token = access_token
        @created_at = created_at
        @expires_in = expires_in
        @scope = scope
        @token_type = token_type
      end
    end
  end
end
