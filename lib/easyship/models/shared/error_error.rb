# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Easyship
  module Shared
  

    class ErrorError < ::Easyship::Utils::FieldAugmented
      extend T::Sig

      # A short code that represents the error.
      field :code, T.nilable(::String), { 'format_json': { 'letter_case': ::Easyship::Utils.field_name('code') } }
      # An array of human-readable messages providing detailed information about the error.
      field :details, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::Easyship::Utils.field_name('details') } }
      # A human-readable message providing brief information about the error.
      field :message, T.nilable(::String), { 'format_json': { 'letter_case': ::Easyship::Utils.field_name('message') } }
      # An unique ID represent the request.
      field :request_id, T.nilable(::String), { 'format_json': { 'letter_case': ::Easyship::Utils.field_name('request_id') } }
      # The type of error returned.
      field :type, T.nilable(::Easyship::Shared::Type), { 'format_json': { 'letter_case': ::Easyship::Utils.field_name('type'), 'decoder': Utils.enum_from_string(::Easyship::Shared::Type, true) } }


      sig { params(code: T.nilable(::String), details: T.nilable(T::Array[::String]), message: T.nilable(::String), request_id: T.nilable(::String), type: T.nilable(::Easyship::Shared::Type)).void }
      def initialize(code: nil, details: nil, message: nil, request_id: nil, type: nil)
        @code = code
        @details = details
        @message = message
        @request_id = request_id
        @type = type
      end
    end
  end
end
