# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module Easyship
  module Shared
  
    # OAuth 2 Token Info
    class OAuth2TokenInfo < ::Easyship::Utils::FieldAugmented
      extend T::Sig

      # OAuth 2 Client Application
      field :application, T.nilable(::Easyship::Shared::Application), { 'format_json': { 'letter_case': ::Easyship::Utils.field_name('application') } }
      # OAuth 2 Access Token Creation Time
      field :created_at, T.nilable(::Integer), { 'format_json': { 'letter_case': ::Easyship::Utils.field_name('created_at') } }
      # OAuth 2 Access Token Expiration Time in Seconds
      field :expires_in, T.nilable(::Integer), { 'format_json': { 'letter_case': ::Easyship::Utils.field_name('expires_in') } }
      # OAuth 2 Resource Owner ID. Always `null` when using `client_credentials` grant type.
      field :resource_owner_id, T.nilable(::String), { 'format_json': { 'letter_case': ::Easyship::Utils.field_name('resource_owner_id') } }
      # OAuth 2 Scopes
      field :scope, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::Easyship::Utils.field_name('scope') } }


      sig { params(application: T.nilable(::Easyship::Shared::Application), created_at: T.nilable(::Integer), expires_in: T.nilable(::Integer), resource_owner_id: T.nilable(::String), scope: T.nilable(T::Array[::String])).void }
      def initialize(application: nil, created_at: nil, expires_in: nil, resource_owner_id: nil, scope: nil)
        @application = application
        @created_at = created_at
        @expires_in = expires_in
        @resource_owner_id = resource_owner_id
        @scope = scope
      end
    end
  end
end
