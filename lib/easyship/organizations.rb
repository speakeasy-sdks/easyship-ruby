# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module Easyship
  extend T::Sig
  class Organizations
    extend T::Sig
    # Organizations API

    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end


    sig { params(request: T.nilable(::Easyship::Shared::OrganizationCreate)).returns(Utils::FieldAugmented) }
    def create(request)
      # create - Create an Organization
      # Create a new organization (group of your child companies) in your group.
      # 
      # Required authorization scope: `enterprise.organization`
      # 
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/2023-09/organizations"
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :request, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::Easyship::Operations::CreateOrganizationsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 201
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::Easyship::Shared::OrganizationSingle)
          res.organization_single = out
        end
      end
      res
    end


    sig { params(organization_id: ::String).returns(Utils::FieldAugmented) }
    def delete(organization_id)
      # delete - Delete an organization
      # Delete an organization (group of child companies) from your group.
      # An organization can be deleted only when there are no companies in it.
      # 
      # Required authorization scope: `enterprise.organization`
      # 
      request = ::Easyship::Operations::DeleteOrganizationsRequest.new(
        
        organization_id: organization_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::Easyship::Operations::DeleteOrganizationsRequest,
        base_url,
        '/2023-09/organizations/{organization_id}',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.delete(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::Easyship::Operations::DeleteOrganizationsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::Easyship::Shared::Success)
          res.success = out
        end
      elsif r.status == 422
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::Easyship::Shared::Error)
          res.error = out
        end
      end
      res
    end


    sig { params(organization_id: ::String).returns(Utils::FieldAugmented) }
    def get(organization_id)
      # get - Get an Organization
      # Retrieve details of a specific organization (group of child companies) in your group.
      # 
      # Required authorization scope: `enterprise.organization`
      # 
      request = ::Easyship::Operations::GetOrganizationsRequest.new(
        
        organization_id: organization_id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::Easyship::Operations::GetOrganizationsRequest,
        base_url,
        '/2023-09/organizations/{organization_id}',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::Easyship::Operations::GetOrganizationsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::Easyship::Shared::OrganizationSingle)
          res.organization_single = out
        end
      end
      res
    end


    sig { params(page: T.nilable(::Integer), per_page: T.nilable(::Integer)).returns(Utils::FieldAugmented) }
    def list_all(page = nil, per_page = nil)
      # list_all - List all Organizations
      # Retrieve a list of organizations (groups of child companies) that are a part of your group.
      # 
      # Required authorization scope: `enterprise.organization`
      # 
      request = ::Easyship::Operations::ListOrganizationsRequest.new(
        
        page: page,
        per_page: per_page
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = "#{base_url}/2023-09/organizations"
      headers = {}
      query_params = Utils.get_query_params(::Easyship::Operations::ListOrganizationsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::Easyship::Operations::ListOrganizationsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::Easyship::Shared::OrganizationList)
          res.organization_list = out
        end
      end
      res
    end


    sig { params(organization_id: ::String, company_name: T.nilable(::String), easyship_company_id: T.nilable(::String), owner_email: T.nilable(::String), sort_by: T.nilable(::Easyship::Operations::QueryParamSortBy), sort_direction: T.nilable(::Easyship::Operations::QueryParamSortDirection)).returns(Utils::FieldAugmented) }
    def list_companies(organization_id, company_name = nil, easyship_company_id = nil, owner_email = nil, sort_by = nil, sort_direction = nil)
      # list_companies - List all Companies of the Organization
      # Retrieve a list of companies from a specific organization.
      # 
      # Required authorization scope: `enterprise.company`
      # 
      request = ::Easyship::Operations::ListOrganizationCompaniesRequest.new(
        
        organization_id: organization_id,
        company_name: company_name,
        easyship_company_id: easyship_company_id,
        owner_email: owner_email,
        sort_by: sort_by,
        sort_direction: sort_direction
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::Easyship::Operations::ListOrganizationCompaniesRequest,
        base_url,
        '/2023-09/organizations/{organization_id}/companies',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(::Easyship::Operations::ListOrganizationCompaniesRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::Easyship::Operations::ListOrganizationCompaniesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::Easyship::Shared::CompanyList)
          res.company_list = out
        end
      end
      res
    end


    sig { params(organization_id: ::String, organization_update: T.nilable(::Easyship::Shared::OrganizationUpdate)).returns(Utils::FieldAugmented) }
    def update(organization_id, organization_update = nil)
      # update - Update an Organization
      # Update a specific organization (group of child companies).
      # 
      # Required authorization scope: `enterprise.organization`
      # 
      request = ::Easyship::Operations::UpdateOrganizationsRequest.new(
        
        organization_id: organization_id,
        organization_update: organization_update
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        ::Easyship::Operations::UpdateOrganizationsRequest,
        base_url,
        '/2023-09/organizations/{organization_id}',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :organization_update, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.patch(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = ::Easyship::Operations::UpdateOrganizationsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, ::Easyship::Shared::OrganizationSingle)
          res.organization_single = out
        end
      end
      res
    end
  end
end
